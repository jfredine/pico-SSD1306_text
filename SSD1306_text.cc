#include <stdio.h>
#include <string.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "SSD1306_text.h"



// Font array initially taken from the Pico SSD1306 example
// and then re-organized with 128 entries to support the ASCII
// characters and make look up easier.  Patterns for more symbols
// have been added but some visible symbols are still not present
// and will be presented as a space.

/**
 * Copyright (c) 2022 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Vertical bitmaps, A-Z, 0-9. Each is 8 pixels high and wide
// Theses are defined vertically to make them quick to copy to FB

uint8_t SSD1306_text::font_[][8] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // NUL
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // SOH
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // STX
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ETX
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // EOT
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ENQ
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ACK
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // BEL
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // BS
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // HT
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // LF
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // VT
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // FF
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // CR
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // SO
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // SI
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // DLE
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // DC1
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // DC2
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // DC3
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // DC4
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // NAK
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // SYN
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ETB
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // CAN
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // EM
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // SUB
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ESC
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // FS
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // GS
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // RS
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // US
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // Space
{0x00, 0x00, 0xf6, 0xf6, 0x00, 0x00, 0x00, 0x00},  // !
{0x00, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0x00},  // "
{0x24, 0x24, 0xfe, 0x24, 0xfe, 0x24, 0x24, 0x00},  // #
{0x00, 0x24, 0x54, 0xfe, 0x54, 0x08, 0x00, 0x00},  // $ 
{0x0a, 0x14, 0x0a, 0x54, 0xa0, 0x60, 0xc0, 0x00},  // %
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // &
{0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00},  // '
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // (
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // )
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // *
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // +
{0x00, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00},  // ,
{0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},  // -
{0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00},  // .
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // /
{0x7c, 0x82, 0x82, 0x92, 0x82, 0x82, 0x7c, 0x00},  // 0
{0x00, 0x00, 0x42, 0xfe, 0x02, 0x00, 0x00, 0x00},  // 1
{0x0c, 0x92, 0x92, 0x92, 0x92, 0x62, 0x00, 0x00},  // 2
{0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00},  // 3
{0xfc, 0x04, 0x04, 0x1e, 0x04, 0x04, 0x00, 0x00},  // 4
{0xf2, 0x92, 0x92, 0x92, 0x92, 0x0c, 0x00, 0x00},  // 5
{0xfc, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0c, 0x00},  // 6
{0x80, 0x80, 0x80, 0x86, 0x8c, 0xb0, 0xc0, 0x00},  // 7
{0x6c, 0x92, 0x92, 0x92, 0x92, 0x92, 0x6c, 0x00},  // 8
{0x60, 0x90, 0x90, 0x90, 0x90, 0x90, 0xfe, 0x00},  // 9
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // :
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ;
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // <
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // =
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // >
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ?
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // @
{0x1e, 0x28, 0x48, 0x88, 0x48, 0x28, 0x1e, 0x00},  // A
{0xfe, 0x92, 0x92, 0x92, 0x92, 0x92, 0x7c, 0x00},  // B
{0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x00},  // C
{0xfe, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00},  // D
{0xfe, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00},  // E
{0xfe, 0x90, 0x90, 0x90, 0x90, 0x80, 0x80, 0x00},  // F
{0xfe, 0x82, 0x82, 0x82, 0x8a, 0x8a, 0xce, 0x00},  // G
{0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00},  // H
{0x00, 0x00, 0x82, 0xfe, 0x82, 0x00, 0x00, 0x00},  // I
{0x04, 0x02, 0x02, 0xfc, 0x00, 0x00, 0x00, 0x00},  // J
{0x00, 0xfe, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00},  // K
{0xfe, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00},  // L
{0xfe, 0x40, 0x20, 0x10, 0x20, 0x40, 0xfe, 0x00},  // M
{0xfe, 0x40, 0x20, 0x10, 0x08, 0x04, 0xfe, 0x00},  // N
{0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00},  // O
{0xfe, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00},  // P
{0x7c, 0x82, 0x82, 0x92, 0x8a, 0x86, 0x7e, 0x00},  // Q
{0xfe, 0x88, 0x88, 0x88, 0x8c, 0x8a, 0x70, 0x00},  // R
{0x00, 0x64, 0x92, 0x92, 0x92, 0x4c, 0x00, 0x00},  // S
{0x80, 0x80, 0x80, 0xfe, 0x80, 0x80, 0x80, 0x00},  // T
{0xfc, 0x02, 0x02, 0x02, 0x02, 0x02, 0xfc, 0x00},  // U
{0xf0, 0x08, 0x04, 0x02, 0x04, 0x08, 0xf0, 0x00},  // V
{0xfe, 0x04, 0x08, 0x10, 0x08, 0x04, 0xfe, 0x00},  // W
{0x00, 0x82, 0x44, 0x28, 0x28, 0x44, 0x82, 0x00},  // X
{0x80, 0x40, 0x20, 0x1e, 0x20, 0x40, 0x80, 0x00},  // Y
{0x82, 0x86, 0x9a, 0xa2, 0xc2, 0x82, 0x00, 0x00},  // Z
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // [
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // [back slash]
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ]
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ^
{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00},  // _
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // `
{0x00, 0x00, 0x4c, 0x52, 0x52, 0x3e, 0x02, 0x00},  // a
{0x00, 0xfe, 0x14, 0x22, 0x22, 0x12, 0x0c, 0x00},  // b
{0x00, 0x3c, 0x42, 0x42, 0x42, 0x24, 0x00, 0x00},  // c
{0x00, 0x0c, 0x12, 0x22, 0x22, 0x14, 0xfe, 0x00},  // d
{0x00, 0x3c, 0x52, 0x92, 0x92, 0x52, 0x62, 0x00},  // e
{0x10, 0x10, 0x7e, 0x90, 0x80, 0x60, 0x00, 0x00},  // f
{0x00, 0x00, 0x32, 0x4a, 0x4a, 0x7e, 0x00, 0x00},  // g
{0x00, 0xfe, 0x08, 0x10, 0x10, 0x0e, 0x00, 0x00},  // h
{0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00},  // i
{0x04, 0x02, 0x02, 0xbc, 0x00, 0x00, 0x00, 0x00},  // j
{0x00, 0xfe, 0x08, 0x10, 0x28, 0x44, 0x02, 0x00},  // k
{0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00},  // l
{0x3e, 0x10, 0x20, 0x18, 0x20, 0x1e, 0x00, 0x00},  // m
{0x00, 0x3e, 0x10, 0x20, 0x20, 0x1e, 0x00, 0x00},  // n
{0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00, 0x00},  // o
{0x00, 0x7e, 0x30, 0x48, 0x48, 0x30, 0x00, 0x00},  // p
{0x60, 0x90, 0x90, 0xfc, 0x02, 0x02, 0x04, 0x00},  // q
{0x00, 0x3e, 0x10, 0x20, 0x20, 0x10, 0x00, 0x00},  // r
{0x00, 0x12, 0x2a, 0x2a, 0x2a, 0x04, 0x00, 0x00},  // s
{0x00, 0x20, 0x20, 0x7c, 0x22, 0x22, 0x00, 0x00},  // t
{0x00, 0x7c, 0x02, 0x02, 0x02, 0x7e, 0x00, 0x00},  // u
{0x00, 0x78, 0x04, 0x02, 0x04, 0x78, 0x00, 0x00},  // v
{0x1c, 0x02, 0x02, 0x0c, 0x02, 0x02, 0x1c, 0x00},  // w
{0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00, 0x00},  // x
{0x00, 0x02, 0x3a, 0x04, 0x08, 0x30, 0x00, 0x00},  // y
{0x00, 0x46, 0x4a, 0x52, 0x62, 0x42, 0x00, 0x00},  // z
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // |
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // }
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ~
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  // DEL
};


static uint8_t reverse(uint8_t b);

uint8_t reverse(uint8_t b) {
   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
   return b;
}


SSD1306_text::SSD1306_text(uint height, uint width, uint i2c_addr,
                           i2c_inst_t *i2c, uint sda, uint scl) {

    height_ = height;
    width_ = width;
    i2c_addr_ = i2c_addr;
    cursor_pos_.row = 0;
    cursor_pos_.col = 0;

    i2c_init(i2c, 400000);
    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);

    uint8_t cmds[] = {
        DISP_SLEEP,
        SET_MEM_MODE,
        0x00,
        SET_DISP_START,
        SET_SEG_MAP_REVERSE,
        SET_MUX_RATIO,
        static_cast<uint8_t>(height_ - 1),
        SET_COM_SCAN_REVERSE,
        SET_DISP_OFFSET,
        0x00,
        SET_COM_HW_CFG,
        0x12,
        SET_CLK,
        0x80,
        SET_PRE,
        0xF1,
        SET_VCOMH,
        0x30,
        SET_CONTRAST,
        0xff,
        DISP_ON_USE_RAM,
        DISP_NORMAL,
        SET_CHARGE_PUMP,
        0x14,
        DISABLE_SCROLL,
        DISP_WAKE
    };

    write_cmds(cmds, sizeof(cmds));

    for (int i = 0; i < (sizeof(font_) / sizeof(font_[0])); i++) {
        for (int j = 0; j < sizeof(font_[0]); j++) {
            font_[i][j] = reverse(font_[i][j]);
        }
    }
}



void SSD1306_text::clear() {
    uint8_t buffer[width_];

    memset(buffer, 0, sizeof(buffer));
    set_cursor(0, 0);
    for (int i = 0; i < (height_ / 8); i++) {
        write_data(buffer, sizeof(buffer));
    }
    set_cursor(0, 0);
}


void SSD1306_text::clear_line(unsigned row) {
    uint8_t buffer[width_];
    cursor_pos_t starting_cursor_pos = cursor_pos_;

    memset(buffer, 0, sizeof(buffer));
    set_cursor(row, 0);
    write_data(buffer, sizeof(buffer));
    set_cursor(starting_cursor_pos.row, starting_cursor_pos.col);
}


void SSD1306_text::set_cursor(unsigned row, unsigned col) {
    uint8_t cmds[6];

    if ((row > ((height_ - 1) / 8))
        || (col  > (width_ - 1) / 8)) {
        return;
    }

    cmds[0] = SET_LO_HI_COL_ADDR;
    cmds[1] = col * 8;
    cmds[2] = width_ - 1;
    cmds[3] = SET_LO_HI_PAGE_ADDR;
    cmds[4] = row;
    cmds[5] = (height_ / 8) - 1;
    write_cmds(cmds, sizeof(cmds));

    cursor_pos_.row = row;
    cursor_pos_.col = col;
}


void SSD1306_text::write_string(const char *str) {
    const char *cp;
    for (cp = str; *cp != '\0'; cp++) {
        char c = *cp;
        if (c == '\n') {
            cursor_pos_.row++;
            if (cursor_pos_.row == (height_ / 8)) {
                cursor_pos_.row = 0;
            }
            set_cursor(cursor_pos_.row, 0);
            clear_line(cursor_pos_.row);
        } else {
            write_data(font_[c], 8);
            cursor_pos_.col++;
            if (cursor_pos_.col == (width_ / 8)) {
                cursor_pos_.col = 0;
                cursor_pos_.row++;
                if (cursor_pos_.row == (height_ / 8)) {
                    cursor_pos_.row = 0;
                    // wrap back to top does not seem to work automatically
                    set_cursor(cursor_pos_.row, 0);
                }
                clear_line(cursor_pos_.row);
            }
        }
    }
}


void SSD1306_text::write_cmds(const uint8_t *cmd, unsigned len) {
    uint8_t cmd_bytes[2];
    cmd_bytes[0] = 0x80;  // Co high, D/C# low
    for (unsigned i = 0; i < len; i++) {
        cmd_bytes[1] = cmd[i];
        i2c_write_blocking(i2c_default, i2c_addr_, cmd_bytes, 2, false);
    }
}


void SSD1306_text::write_data(uint8_t *data, unsigned len) {
    uint8_t buffer[129];
    unsigned write_len;
    unsigned written;

    buffer[0] = 0x40;
    written = 0;
    while (written != len) {
        write_len = ((len - written) > (sizeof(buffer) - 1)) ? sizeof(buffer) - 1 : (len - written);
        memcpy(&buffer[1], &data[written], write_len);
        i2c_write_blocking(i2c_default, i2c_addr_, buffer, write_len + 1, false);
        written += write_len;
    }
}
